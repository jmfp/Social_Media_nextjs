// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  content     String
  userId      String
  //image       String
  published   Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  likes       String[]  //ids of the likes for the content
  //reposts     Int       @default(0)
  comments    String[]  //ids of comment objects
  pictures    String    @default("") //TODO: add support for multiple images
  link        String    @default("")
  //author   User      @relation(fields: [authorId], references: [id])
  //authorId String    @db.ObjectId
  //comments Comment[]
}

model Like{
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    //id of user that liked the content
  //replies     String[]
}

model Comment{
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  content     String    
  likes       String[]
  //replies     String[]
}

model Character {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  level       Int       @default(1)
  exp         Int       @default(0)  
  race        String    
  pclass      String
  background  String
  backstory   String    
  equipment   Json[]    //all equipment in the characters inventory
  languages   Json[]    //all languages known by character
  finished    Boolean   @default(false) //ensures the character creation process is finished
  image       String?
  userId      String?   @db.ObjectId
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  email       String    @unique
  password    String
  username    String    @unique
  characters  String[]  @db.ObjectId//array of id's of objects for users characters
  subscribed  Boolean   @default(false)
  friends     String[]  @db.ObjectId
  messages    String[]  @db.ObjectId
  profilePic  String    @default("")
}

model FriendRequest {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId//id of user sending request
  receiverId  String    @db.ObjectId//id of user receiving request
}
